---

- name: Create VirtualBMC directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0750
    owner: root
    group: root
  with_items:
    - "{{ working_dir }}/virtualbmc"
    - "{{ working_dir }}/virtualbmc/vbmc"
    - "{{ working_dir }}/virtualbmc/vbmc/conf"
    - "{{ working_dir }}/virtualbmc/vbmc/log"
    - "{{ working_dir }}/virtualbmc/sushy-tools"
  become: true

- name: Create VirtualBMC configuration file
  copy:
    mode: 0750
    dest: "{{ working_dir }}/virtualbmc/vbmc/virtualbmc.conf"
    content: |
      [default]
      config_dir=/root/.vbmc/conf/
      [log]
      logfile=/root/.vbmc/log/virtualbmc.log
      debug=True
      [ipmi]
      session_timout=20
  become: true

- name: get virthost non_root_user userid
  command: id -u {{ non_root_user }}
  register: non_root_user_uid

- name: set fact on non_root_user_uid
  set_fact:
    non_root_user_uid: "{{ non_root_user_uid.stdout }}"

# The first network defined with an address will be used for vbmc access.
- name: set vbmc address (v4) if there is a (nat) network defined with an address
  set_fact:
    vbmc_address_v4: "{{ networks|selectattr('address_v4', 'defined')|map(attribute='address_v4')|list|first }}"
  when: networks|selectattr('address_v4', 'defined')|map(attribute='name')|list|length > 0

- name: set vbmc address (v6) if there is a (nat) network defined with an address
  set_fact:
    vbmc_address_v6: "{{ networks|selectattr('address_v6', 'defined')|map(attribute='address_v6')|list|first }}"
  when: networks|selectattr('address_v6', 'defined')|map(attribute='name')|list|length > 0

- name: set vbmc address from IPv4 networks if possible, otherwise IPv6
  set_fact:
    vbmc_address: "{% if vbmc_address_v4|ipv4 != False %}{{ vbmc_address_v4 }}{% else %}{{ vbmc_address_v6 }}{% endif %}"

# The connection uri is slightly different when using qemu:///system
# and requires the root user.
- name: set qemu uri for qemu:///system usage
  set_fact:
    vbmc_libvirt_uri: "qemu+ssh://root@{{ vbmc_address | ipwrap }}/system?&keyfile=/root/ssh/id_rsa_virt_power&no_verify=1&no_tty=1"
  when: libvirt_uri == "qemu:///system"

- name: set qemu uri for qemu:///session usage
  set_fact:
    vbmc_libvirt_uri: "qemu+ssh://{{ non_root_user }}@{{ vbmc_address | ipwrap }}/session?socket=/run/user/{{ non_root_user_uid }}/libvirt/libvirt-sock&keyfile=/root/ssh/id_rsa_virt_power&no_verify=1&no_tty=1"
  when: vbmc_libvirt_uri is not defined

- name: Create VirtualBMC directories
  when: vm_platform|default("libvirt") != "fake"
  file:
    path: "{{ working_dir }}/virtualbmc/vbmc/conf/{{ item.name }}"
    state: directory
    mode: 0750
    owner: root
    group: root
  with_items: "{{ vm_nodes }}"
  become: true

- name: Create the Virtual BMCs
  when: vm_platform|default("libvirt") != "fake"
  copy:
    mode: 0750
    dest: "{{ working_dir }}/virtualbmc/vbmc/conf/{{ item.name }}/config"
    content: |
      [VirtualBMC]
      username = {{ vbmc_username }}
      password = {{ vbmc_password }}
      domain_name = {{ item.name }}
      libvirt_uri = {{ vbmc_libvirt_uri }}
      address = {{ vbmc_address }}
      active = True
      port = {{ item.virtualbmc_port }}
  with_items: "{{ vm_nodes }}"
  become: true

- name: Create a password file for Redfish Virtual BMCs
  htpasswd:
    path: "{{ working_dir }}/virtualbmc/sushy-tools/htpasswd"
    crypt_scheme: bcrypt
    name: "{{ vbmc_username }}"
    password: "{{ vbmc_password }}"

- name: Create the Redfish Virtual BMCs
  copy:
    mode: 0750
    dest: "{{ working_dir }}/virtualbmc/sushy-tools/conf.py"
    content: |
      SUSHY_EMULATOR_LIBVIRT_URI = "{{ vbmc_libvirt_uri }}"
      SUSHY_EMULATOR_IGNORE_BOOT_DEVICE = {{ sushy_ignore_boot_device }}
      SUSHY_EMULATOR_VMEDIA_VERIFY_SSL = {{ sushy_vmedia_verify_ssl }}
      SUSHY_EMULATOR_AUTH_FILE = "/root/sushy/htpasswd"
  become: true
  when: vm_platform|default("libvirt") != "fake"

- name: get a list of MACs to use
  when: vm_platform|default("libvirt") == "fake"
  include_tasks: ../../common/tasks/generate_node_mac.yml

- name: Set the uuid for fake VMs
  when: vm_platform|default("libvirt") == "fake"
  set_fact:
    vm_id: "{{ vm_id|default({}) | combine ( {item.name: item.name | to_uuid()} ) }}"
  with_items: "{{ vm_nodes }}"

# Define the fake vm nodes.  These will be
# used by sushy-tools.
- name: Define fake vms
  when: vm_platform|default("libvirt") == "fake"
  template:
    src: ../templates/fake_nodes.json.j2
    dest: "{{ fake_nodes_file }}"

- name: set_fact BMC Driver
  when: vm_platform|default("libvirt") == "fake"
  set_fact:
    vm_driver: "{{ lookup('env', 'BMC_DRIVER') | default('redfish', true) }}"

- name: Write ironic node json files
  when: vm_platform|default("libvirt") == "fake"
  include_tasks: ../../common/tasks/write_ironic_nodes_tasks.yml

# if FakeIPA enabled then set required sushy-tools config
- name: Create the Redfish Virtual BMCs for FakeIPA
  copy:
    mode: 0750
    dest: "{{ working_dir }}/virtualbmc/sushy-tools/conf.py"
    content: |
      SUSHY_EMULATOR_LIBVIRT_URI = "{{ vbmc_libvirt_uri }}"
      SUSHY_EMULATOR_IGNORE_BOOT_DEVICE = {{ sushy_ignore_boot_device }}
      SUSHY_EMULATOR_VMEDIA_VERIFY_SSL = {{ sushy_vmedia_verify_ssl }}
      SUSHY_EMULATOR_AUTH_FILE = "/root/sushy/htpasswd"
      SUSHY_EMULATOR_FAKE_DRIVER = True
      SUSHY_EMULATOR_FAKE_IPA = True
      SUSHY_EMULATOR_FAKE_SYSTEMS = {{ lookup('ansible.builtin.file', fake_nodes_file ) }}
  become: true
  when: vm_platform|default("libvirt") == "fake"
