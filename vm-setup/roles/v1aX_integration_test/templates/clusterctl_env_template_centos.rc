export REGISTRY='{{ REGISTRY }}'
export IRONIC_HOST_IP='{{ IRONIC_HOST_IP }}'
export DEPLOY_KERNEL_URL='{{ DEPLOY_KERNEL_URL }}'
export DEPLOY_RAMDISK_URL='{{ DEPLOY_RAMDISK_URL }}'
export IRONIC_URL='{{ IRONIC_URL }}'
export IRONIC_INSPECTOR_URL='{{ IRONIC_INSPECTOR_URL }}'
export POD_CIDR='{{ POD_CIDR }}'
export SERVICE_CIDR='{{ SERVICE_CIDR }}'
export API_ENDPOINT_HOST='{{ CLUSTER_APIENDPOINT_HOST }}'
export API_ENDPOINT_PORT='{{ API_ENDPOINT_PORT }}'
export IMAGE_URL='{{ IMAGE_URL }}'
export IMAGE_CHECKSUM='{{ IMAGE_CHECKSUM }}'
export IMAGE_CHECKSUM_TYPE='md5'
export IMAGE_FORMAT='raw'
export PROVISIONING_POOL_RANGE_START='{{ PROVISIONING_POOL_RANGE_START }}'
export PROVISIONING_POOL_RANGE_END='{{ PROVISIONING_POOL_RANGE_END }}'
export PROVISIONING_CIDR='{{ PROVISIONING_CIDR }}'
export BAREMETALV4_POOL_RANGE_START='{{ BAREMETALV4_POOL_RANGE_START }}'
export BAREMETALV4_POOL_RANGE_END='{{ BAREMETALV4_POOL_RANGE_END }}'
export EXTERNAL_SUBNET_V4_PREFIX='{{ EXTERNAL_SUBNET_V4_PREFIX }}'
export EXTERNAL_SUBNET_V4_HOST='{{ EXTERNAL_SUBNET_V4_HOST }}'
export BAREMETALV6_POOL_RANGE_START='{{ BAREMETALV6_POOL_RANGE_START }}'
export BAREMETALV6_POOL_RANGE_END='{{ BAREMETALV6_POOL_RANGE_END }}'
export EXTERNAL_SUBNET_V6_PREFIX='{{ EXTERNAL_SUBNET_V6_PREFIX }}'
export EXTERNAL_SUBNET_V6_HOST='{{ EXTERNAL_SUBNET_V6_HOST }}'
export CTLPLANE_KUBEADM_EXTRA_CONFIG="
    users:
    - name: {{ IMAGE_USERNAME }}
      sudo: \"ALL=(ALL) NOPASSWD:ALL\"
      sshAuthorizedKeys:
      - {{ SSH_PUB_KEY_CONTENT }}
    preKubeadmCommands:
{% if CAPM3_VERSION == "v1alpha3" %}
      - ifup eth1
{% endif %}
      - systemctl enable --now crio keepalived kubelet
      - systemctl link /lib/systemd/system/monitor.keepalived.service
      - systemctl enable monitor.keepalived.service
      - systemctl start monitor.keepalived.service
    postKubeadmCommands:
      - mkdir -p /home/{{ IMAGE_USERNAME }}/.kube
      - cp /etc/kubernetes/admin.conf /home/{{ IMAGE_USERNAME }}/.kube/config
      - chown {{ IMAGE_USERNAME }}:{{ IMAGE_USERNAME }} /home/{{ IMAGE_USERNAME }}/.kube/config
    files:
      - path: /usr/local/bin/retrieve.configuration.files.sh
        owner: root:root
        permissions: '0755'
        content: |
            #!/bin/bash
            set -e
            url=\"\${1}\"
            dst=\"\${2}\"
            filename=\"\$(basename \${url})\"
            tmpfile=\"/tmp/\${filename}\"
            curl -sSL -w \"%{http_code}\" \"\${url}\" | sed \"s:/usr/bin:/usr/local/bin:g\" > /tmp/\"\${filename}\"
            http_status=\$(cat \"\${tmpfile}\" | tail -n 1)
            if [ \"\${http_status}\" != \"200\" ]; then
              echo \"Error: unable to retrieve \${filename} file\";
              exit 1;
            else
              cat \"\${tmpfile}\"| sed '\$d' > \"\${dst}\";
            fi
      - path: /usr/local/bin/monitor.keepalived.sh
        owner: root:root
        permissions: '0755'
        content: |
            #!/bin/bash
            while :; do
              curl -sk https://127.0.0.1:6443/healthz 1>&2 > /dev/null
              isOk=\$?
              isActive=\$(systemctl show -p ActiveState keepalived.service | cut -d'=' -f2)
              if [ \$isOk == \"0\" ] &&  [ \$isActive != \"active\" ]; then
                logger 'API server is healthy, however keepalived is not running, starting keepalived'
                echo 'API server is healthy, however keepalived is not running, starting keepalived'
                sudo systemctl start keepalived.service
              elif [ \$isOk != \"0\" ] &&  [ \$isActive == \"active\" ]; then
                logger 'API server is not healthy, however keepalived running, stopping keepalived'
                echo 'API server is not healthy, however keepalived running, stopping keepalived'
                sudo systemctl stop keepalived.service
              fi
              sleep 5
            done
      - path: /lib/systemd/system/monitor.keepalived.service
        owner: root:root
        content: |
          [Unit]
          Description=Monitors keepalived adjusts status with that of API server
          After=syslog.target network-online.target
          [Service]
          Type=simple
          Restart=always
          ExecStart=/usr/local/bin/monitor.keepalived.sh
          [Install]
          WantedBy=multi-user.target
      - path: /etc/keepalived/keepalived.conf
        content: |
          ! Configuration File for keepalived
          global_defs {
              notification_email {
              sysadmin@example.com
              support@example.com
              }
              notification_email_from lb@example.com
              smtp_server localhost
              smtp_connect_timeout 30
          }
          vrrp_instance VI_1 {
              state MASTER
              interface eth1
              virtual_router_id 1
              priority 101
              advert_int 1
              virtual_ipaddress {
                  {{ CLUSTER_APIENDPOINT_HOST }}
              }
          }
{% if CAPM3_VERSION == "v1alpha3" %}
      - path: /etc/sysconfig/network-scripts/ifcfg-eth1
        owner: root:root
        permissions: '0644'
        content: |
          BOOTPROTO=dhcp
          DEVICE=eth1
          ONBOOT=yes
          TYPE=Ethernet
          USERCTL=no
{% endif %}
      - path: /etc/sysconfig/network-scripts/ifcfg-eth0
        owner: root:root
        permissions: '0644'
        content: |
          BOOTPROTO=none
          DEVICE=eth0
          ONBOOT=yes
          TYPE=Ethernet
          USERCTL=no
          BRIDGE={{ IRONIC_ENDPOINT_BRIDGE }}
      - path: /etc/sysconfig/network-scripts/ifcfg-{{ IRONIC_ENDPOINT_BRIDGE }}
        owner: root:root
        permissions: '0644'
        content: |
          TYPE=Bridge
          DEVICE={{ IRONIC_ENDPOINT_BRIDGE }}
          ONBOOT=yes
          USERCTL=no
{% if CAPM3_VERSION == "v1alpha3" %}
          BOOTPROTO=dhcp
{% else %}
          BOOTPROTO="static"
          IPADDR={{ "{{ ds.meta_data.provisioningIP }}" }}
          PREFIX={{ "{{ ds.meta_data.provisioningCIDR }}" }}
{% endif %}
      - path: /etc/yum.repos.d/kubernetes.repo
        owner: root:root
        permissions: '0644'
        content: |
          [kubernetes]
          name=Kubernetes
          baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
          enabled=1
          gpgcheck=1
          repo_gpgcheck=0
          gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      - path : /etc/containers/registries.conf
        content: |
          [registries.insecure]
          registries = ['{{ REGISTRY }}']
"
export WORKERS_KUBEADM_EXTRA_CONFIG="
      users:
      - name: {{ IMAGE_USERNAME }}
        sudo: \"ALL=(ALL) NOPASSWD:ALL\"
        sshAuthorizedKeys:
        - {{ SSH_PUB_KEY_CONTENT }}
      preKubeadmCommands:
{% if CAPM3_VERSION == "v1alpha3" %}
        - ifup eth1
{% endif %}
        - systemctl enable --now crio kubelet
      files:
        - path: /usr/local/bin/retrieve.configuration.files.sh
          owner: root:root
          permissions: '0755'
          content: |
              #!/bin/bash
              set -e
              url=\"\${1}\"
              dst=\"\${2}\"
              filename=\"\$(basename \${url})\"
              tmpfile=\"/tmp/\${filename}\"
              curl -sSL -w \"%{http_code}\" \"\${url}\" | sed \"s:/usr/bin:/usr/local/bin:g\" > /tmp/\"\${filename}\"
              http_status=\$(cat \"\${tmpfile}\" | tail -n 1)
              if [ \"\${http_status}\" != \"200\" ]; then
                echo \"Error: unable to retrieve \${filename} file\";
                exit 1;
              else
                cat \"\${tmpfile}\"| sed '\$d' > \"\${dst}\";
              fi
{% if CAPM3_VERSION == "v1alpha3" %}
        - path: /etc/sysconfig/network-scripts/ifcfg-eth1
          owner: root:root
          permissions: '0644'
          content: |
            BOOTPROTO=dhcp
            DEVICE=eth1
            ONBOOT=yes
            TYPE=Ethernet
            USERCTL=no
{% endif %}
        - path: /etc/sysconfig/network-scripts/ifcfg-eth0
          owner: root:root
          permissions: '0644'
          content: |
            BOOTPROTO=none
            DEVICE=eth0
            ONBOOT=yes
            TYPE=Ethernet
            USERCTL=no
            BRIDGE={{ IRONIC_ENDPOINT_BRIDGE }}
        - path: /etc/sysconfig/network-scripts/ifcfg-{{ IRONIC_ENDPOINT_BRIDGE }}
          owner: root:root
          permissions: '0644'
          content: |
            TYPE=Bridge
            DEVICE={{ IRONIC_ENDPOINT_BRIDGE }}
            ONBOOT=yes
            USERCTL=no
{% if CAPM3_VERSION == "v1alpha3" %}
            BOOTPROTO=dhcp
{% else %}
            BOOTPROTO="static"
            IPADDR={{ "{{ ds.meta_data.provisioningIP }}" }}
            PREFIX={{ "{{ ds.meta_data.provisioningCIDR }}" }}
{% endif %}
        - path: /etc/yum.repos.d/kubernetes.repo
          owner: root:root
          permissions: '0644'
          content: |
            [kubernetes]
            name=Kubernetes
            baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
            enabled=1
            gpgcheck=1
            repo_gpgcheck=0
            gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        - path : /etc/containers/registries.conf
          owner: root:root
          permissions: '0644'
          content: |
            [registries.insecure]
            registries = ['{{ REGISTRY }}']
"
