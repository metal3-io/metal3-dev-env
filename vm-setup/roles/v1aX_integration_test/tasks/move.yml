---
  - name: Define number of BMH's
    set_fact:
      NUMBER_OF_BMH: "{{ NUM_OF_CONTROLPLANE_REPLICAS|int +  NUM_OF_WORKER_REPLICAS|int }}"
      general_containers:
          - httpd-infra
          - registry
          - sushy-tools
          - vbmc
      ironic_containers:
          - ironic
          - ironic-api
          - ironic-conductor
          - ironic-inspector
          - ironic-endpoint-keepalived
          - ironic-log-watch
          - dnsmasq
          - mariadb

  - name: Fetch container logs (kind cluster)
    block:

      - name: Create directories for storing container logs (kind cluster)
        file:
          path: "/tmp/{{ CONTAINER_RUNTIME }}/{{ item }}"
          state: directory
        with_items:
          - "{{ ironic_containers }}"
          - "{{ general_containers }}"

      - name: Fetch container logs before pivoting (kind cluster)
        shell: "sudo {{ CONTAINER_RUNTIME }} logs {{ item }} > /tmp/{{ CONTAINER_RUNTIME }}/{{ item }}/stdout.log 2> /tmp/{{ CONTAINER_RUNTIME }}/{{ item }}/stderr.log"
        # FIXME(dtantsur): remove ignore_errors after the transition period
        # from ironic-api+conductor to just ironic
        ignore_errors: yes
        with_items:
          - "{{ ironic_containers }}"
          - "{{ general_containers }}"

      - name: Remove ironic container from source cluster (kind cluster)
        docker_container:
          name: "{{ item }}"
          state: absent
        # FIXME(dtantsur): remove ignore_errors after the transition period
        # from ironic-api+conductor to just ironic
        ignore_errors: yes
        with_items: "{{ ironic_containers }}"

    when: EPHEMERAL_CLUSTER == "kind"
    become: yes
    become_user: root

  - name: Fetch container logs (minikube cluster)
    block:

      - name: Create directories for storing container logs (minikube cluster)
        file:
          path: "/tmp/{{ CONTAINER_RUNTIME }}/{{ item }}"
          state: directory
        with_items: "{{ general_containers }}"

      - name: Fetch container logs before pivoting (minikube cluster)
        shell: "sudo {{ CONTAINER_RUNTIME }} logs {{ item }} > /tmp/{{ CONTAINER_RUNTIME }}/{{ item }}/stdout.log 2> /tmp/{{ CONTAINER_RUNTIME }}/{{ item }}/stderr.log"
        with_items: "{{ general_containers }}"

    become: yes
    become_user: root
    when: EPHEMERAL_CLUSTER == "minikube"

  - name: Remove Ironic from source cluster (minikube cluster)
    kubernetes.core.k8s:
      name: "{{ NAMEPREFIX }}-ironic"
      kind: Deployment
      state: absent
      namespace: "{{ IRONIC_NAMESPACE }}"
    when: EPHEMERAL_CLUSTER == "minikube"

  - name: Label BMO CRDs.
    shell: "kubectl label --overwrite crds baremetalhosts.metal3.io {{ item }}"
    with_items:
       - clusterctl.cluster.x-k8s.io=""
    when: CAPM3_VERSION != "v1alpha4"

  - name: Obtain target cluster kubeconfig
    kubernetes.core.k8s_info:
      kind: secrets
      name: "{{ CLUSTER_NAME }}-kubeconfig"
      namespace: "{{ NAMESPACE }}"
    register: metal3_kubeconfig

  - name: Decode and save cluster kubeconfig
    copy:
      content: "{{ metal3_kubeconfig.resources[0].data.value | b64decode }}"
      dest: "/tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml"

  - name: Create namespace
    kubernetes.core.k8s:
      name: "{{ NAMESPACE }}"
      kind: Namespace
      state: present
      kubeconfig: "/tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml"

  # Configure Ironic configmap
  - name: Configure Ironic Configmap
    shell: |
      cp {{ BMOPATH }}/ironic-deployment/keepalived/ironic_bmo_configmap.env {{ BMOPATH }}/ironic-deployment/keepalived/ironic_bmo_configmap.env.orig
      cp {{ IRONIC_DATA_DIR }}/ironic_bmo_configmap.env  {{ BMOPATH }}/ironic-deployment/keepalived/ironic_bmo_configmap.env

  - name: Initialize Provider component in target cluster
    shell: "clusterctl init --kubeconfig /tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml --core cluster-api:{{ CAPIRELEASE }} --bootstrap kubeadm:{{ CAPIRELEASE }} --control-plane kubeadm:{{ CAPIRELEASE }} --infrastructure metal3:{{ CAPM3RELEASE }} -v 5"

  # Check for cert-manager pods on the target cluster
  - name: Check if cert-manager  pods in running state
    kubernetes.core.k8s_info:
      kind: pods
      namespace: cert-manager
      kubeconfig: "/tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml"
      field_selectors:
        - status.phase!=Running
    register: target_running_pods
    retries: 20
    delay: 20
    until: (target_running_pods is succeeded) and
           (target_running_pods.resources | length == 0)

  # Install BMO
  - name: Install Baremetal Operator
    shell: "{{ BMOPATH }}/tools/deploy.sh true false {{ IRONIC_TLS_SETUP }} true true"
    environment:
      IRONIC_HOST: "{{ IRONIC_HOST }}"
      IRONIC_HOST_IP: "{{ IRONIC_HOST_IP }}"
      KUBECTL_ARGS: "{{ KUBECTL_ARGS }}"
    when: CAPM3_VERSION != "v1alpha4"
    args:
      chdir: "{{ BMOPATH }}"

  - name: Reinstate Baremetal Operator Manager
    shell: "mv {{ BMOPATH }}/config/manager/manager.yaml.orig {{ BMOPATH }}/config/manager/manager.yaml"
    when: CAPM3_VERSION != "v1alpha4"

  # Install Ironic
  - name: Install Ironic
    shell: "{{ BMOPATH }}/tools/deploy.sh false true {{ IRONIC_TLS_SETUP }} true true"
    environment:
      IRONIC_HOST: "{{ IRONIC_HOST }}"
      IRONIC_HOST_IP: "{{ IRONIC_HOST_IP }}"
      KUBECTL_ARGS: "{{ KUBECTL_ARGS }}"
    args:
      chdir: "{{ BMOPATH }}"

  - name: Restore original BMO Configmap
    shell: "mv {{ BMOPATH }}/config/default/ironic.env.orig {{ BMOPATH }}/config/default/ironic.env"
    when: CAPM3_VERSION != "v1alpha4"

  - name: Restore original Ironic Configmap
    shell: "mv {{ BMOPATH }}/ironic-deployment/keepalived/ironic_bmo_configmap.env.orig {{ BMOPATH }}/ironic-deployment/keepalived/ironic_bmo_configmap.env"

  - name: Label BMO CRDs in target cluster.
    shell: "kubectl --kubeconfig /tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml label crds baremetalhosts.metal3.io {{ item }} --overwrite "
    with_items:
      - clusterctl.cluster.x-k8s.io=""
    when: CAPM3_VERSION != "v1alpha4"

  # Check for pods & nodes on the target cluster
  - name: Check if pods in running state
    kubernetes.core.k8s_info:
      kind: pods
      kubeconfig: "/tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml"
      field_selectors:
        - status.phase!=Running
    register: target_running_pods
    retries: 150
    delay: 20
    until: (target_running_pods is succeeded) and
           (target_running_pods.resources | length == 0)

  - name: Pivot objects to target cluster
    shell: "clusterctl move --to-kubeconfig /tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml -n {{ NAMESPACE }} -v 10"

  - name: Verify that all machines are provisioned and running.
    include_tasks: verify_resources_states.yml
    vars:
      kubeconfig: "/tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml"

  # Normally as non authenticated user we should
  # fail here(get 401) to reach Ironic.
  - name: Expect 401 from /v1/nodes ednpoint
    uri:
      url: "{{ IRONIC_URL }}nodes"
      return_content: no
      validate_certs: no
      method: GET
      status_code: [401]
