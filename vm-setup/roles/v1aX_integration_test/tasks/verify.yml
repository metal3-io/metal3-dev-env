---
  - name: Verify that all machines are provisioned and running.
    include_tasks: verify_resources_states.yml
    vars:
      kubeconfig: "{{ HOME }}/.kube/config"

  - name: Fetch target cluster kubeconfig
    kubernetes.core.k8s_info:
      api_version: v1
      kind: Secret
      name: "{{ CLUSTER_NAME }}-kubeconfig"
      namespace: "{{ NAMESPACE }}"
    register: kubeconfig_secret

  - name: Store target cluster kubeconfig
    blockinfile:
      path: /tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml
      create: yes
      block: "{{ kubeconfig_secret.resources[0].data.value | b64decode }}"

  # Install Calico
  - name: Download Calico v3.21.x manifests
    get_url:
      url: "https://docs.projectcalico.org/archive/{{ CALICO_MINOR_RELEASE }}/manifests/calico.yaml"
      dest: /tmp/
      mode: '664'
    register: calico_manifest

  - name: Pin calico version to v3.21.0
    ansible.builtin.replace:
      path: /tmp/calico.yaml
      regexp: 'image: docker.io/calico/(.+):v(.+)$'
      replace: 'image: {{ DOCKER_HUB_PROXY }}/calico/\1:{{ CALICO_PATCH_RELEASE }}'

  - name: Replace the POD_CIDR in calico config
    replace:
      path: /tmp/calico.yaml
      regexp: "192.168.0.0/16"
      replace: "{{ POD_CIDR }}"
    register: updated_manifest

  - name: Add IP_AUTODETECTION_METHOD in calico config Ubuntu
    blockinfile:
      path: /tmp/calico.yaml
      insertafter: "{{ POD_CIDR }}"
      block: |
          # for indentation
                      - name: IP_AUTODETECTION_METHOD
                        value: "cidr={{ EXTERNAL_SUBNET_V4_HOST }}/{{ EXTERNAL_SUBNET_V4_PREFIX }}"

  - name: Wait for all control-plane pods become created
    shell: "kubectl get pod --namespace=kube-system --selector tier=control-plane --output=jsonpath='{.items[*].metadata.name}'"
    register: control_plane_pods_created
    until: item in control_plane_pods_created.stdout
    retries: 30
    delay: 10
    with_items:
      - etcd
      - kube-apiserver
      - kube-controller-manager
      - kube-scheduler

  - name: Wait for control-plane pods become ready
    kubernetes.core.k8s_info:
      kind: Pod
      wait: yes
      field_selectors:
        - status.phase=Running
      label_selectors:
        - tier = control-plane
      namespace: kube-system
      wait_sleep: 10
      wait_timeout: 300
      wait_condition:
        type: Ready
        status: "True"

  - name: Apply Calico manifest
    kubernetes.core.k8s:
      state: present
      src: "/tmp/calico.yaml"
      kubeconfig: "/tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml"
    register: install_cni

  - name: Wait (maximum 3 mins) until Calico pods start running
    kubernetes.core.k8s_info:
      api_version: v1
      kind: Pod
      namespace: kube-system
      kubeconfig: /tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml
      field_selectors:
        - status.phase!=Running
    retries: 9
    delay: 20
    register: calico_pods
    until: (calico_pods is succeeded) and
           (calico_pods.resources | length == 0)

  # Check for pods & nodes on the target cluster
  - name: Wait for all pods to be in running state
    kubernetes.core.k8s_info:
      api_version: v1
      kind: Pod
      namespace: "{{ NAMESPACE }}"
      kubeconfig: /tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml
      field_selectors:
        - status.phase!=Running
    retries: 150
    delay: 20
    register: not_running_pods
    until: (not_running_pods is succeeded) and
           (not_running_pods.resources | length == 0)

  - name: Wait for nodes to be in ready state
    kubernetes.core.k8s_info:
      api_version: v1
      kind: Node
      kubeconfig: /tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml
    retries: 150
    delay: 3
    register: nodes
    vars:
      # For all Nodes, select those that have the Ready condition set to True
      query: "[*].status.conditions[? type=='Ready' && status=='True']"
    until: (nodes is succeeded) and
           (nodes.resources | length > 0) and
           (nodes.resources | json_query(query) | length == (NUMBER_OF_BMH | int))
