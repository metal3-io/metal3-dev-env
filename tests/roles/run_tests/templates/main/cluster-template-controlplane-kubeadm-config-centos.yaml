# CentOS specific controlplane kubeadm config
preKubeadmCommands:
  - sysctl -w net.ipv6.conf.all.forwarding=1
  - sysctl -w net.ipv6.conf.default.forwarding=1
  - systemctl restart NetworkManager.service
  - nmcli connection load /etc/NetworkManager/system-connections/{{ IRONIC_ENDPOINT_BRIDGE }}.nmconnection
  - nmcli connection up {{ IRONIC_ENDPOINT_BRIDGE }}
  - nmcli connection load /etc/NetworkManager/system-connections/eth0.nmconnection
  - nmcli connection up eth0
{% if VM_EXTRADISKS == "true" %}
  - (echo n; echo p; echo 1; echo  ;echo  ;echo w) | fdisk /dev/vda
  - mkfs.{{ VM_EXTRADISKS_FILE_SYSTEM }} /dev/vda1
  - mkdir {{ VM_EXTRADISKS_MOUNT_DIR }}
  - mount /dev/vda1 {{ VM_EXTRADISKS_MOUNT_DIR }}
{% endif %}
{% if EXTERNAL_VLAN_ID != "" %}
  - nmcli connection load /etc/NetworkManager/system-connections/eth0.{{ EXTERNAL_VLAN_ID }}.nmconnection
  - nmcli connection up /etc/NetworkManager/system-connections/eth0.{{ EXTERNAL_VLAN_ID }}.nmconnection
{% endif %}
  - rm /etc/cni/net.d/*
  - systemctl enable --now keepalived
  - sleep 30
  - systemctl enable --now crio
  - sleep 30
  - systemctl enable --now kubelet
  - sleep 120
postKubeadmCommands:
  - mkdir -p /home/{{ IMAGE_USERNAME }}/.kube
  - chown {{ IMAGE_USERNAME }}:{{ IMAGE_USERNAME }} /home/{{ IMAGE_USERNAME }}/.kube
  - cp /etc/kubernetes/admin.conf /home/{{ IMAGE_USERNAME }}/.kube/config
  - chown {{ IMAGE_USERNAME }}:{{ IMAGE_USERNAME }} /home/{{ IMAGE_USERNAME }}/.kube/config
files:
  - path: /usr/local/bin/retrieve.configuration.files.sh
    owner: root:root
    permissions: '0755'
    content: |
        #!/bin/bash
        set -e
        url="$1"
        dst="$2"
        filename="$(basename $url)"
        tmpfile="/tmp/$filename"
        curl -sSL -w "%{http_code}" "$url" | sed "s:/usr/bin:/usr/local/bin:g" > /tmp/"$filename"
        http_status=$(cat "$tmpfile" | tail -n 1)
        if [ "$http_status" != "200" ]; then
          echo "Error: unable to retrieve $filename file";
          exit 1;
        else
          cat "$tmpfile"| sed '$d' > "$dst";
        fi
  - path: /etc/keepalived/keepalived.conf
    content: |
      ! Configuration File for keepalived

      script k8s_api_check {
          script "curl -sk https://127.0.0.1:6443/healthz"
          interval 5
          timeout 5
          rise 3
          fall 3
      }

      vrrp_instance VI_1 {
          state MASTER
          interface {% if EXTERNAL_VLAN_ID == "" %}eth1{% else %}eth0.{{ EXTERNAL_VLAN_ID }}{% endif %}

          virtual_router_id 1
          priority 101
          advert_int 1
          virtual_ipaddress {
{% if IP_STACK == "v6" %}
{# According to VRRP, link local address should come first with v6 #}
              {{ CLUSTER_APIENDPOINT_LINK_LOCAL }}
{% endif %}
              {{ CLUSTER_APIENDPOINT_IP }}
          }
          track_script {
              k8s_api_check
          }
      }
  - path: /etc/NetworkManager/system-connections/eth0.nmconnection
    owner: root:root
    permissions: '0600'
    content: |
      [connection]
      id=eth0
      type=ethernet
      interface-name=eth0
      master={{ IRONIC_ENDPOINT_BRIDGE }}
      slave-type=bridge
  - path: /etc/NetworkManager/system-connections/{{ IRONIC_ENDPOINT_BRIDGE }}.nmconnection
    owner: root:root
    permissions: '0600'
    content: |
      [connection]
      id={{ IRONIC_ENDPOINT_BRIDGE }}
      interface-name={{ IRONIC_ENDPOINT_BRIDGE }}
      type=bridge
      autoconnect=yes
      autoconnect-priority=1

      [bridge]
      interface-name={{ IRONIC_ENDPOINT_BRIDGE }}
      stp=false

{% if IP_STACK == "v6" %}
      [ipv4]
      method=disabled

      [ipv6]
      address1={{ "{{ ds.meta_data.provisioningIP }}" }}/{{ "{{ ds.meta_data.provisioningCIDR }}" }}
      addr-gen-mode=eui64
      method=manual
{% else %}
      [ipv4]
      address1={{ "{{ ds.meta_data.provisioningIP }}" }}/{{ "{{ ds.meta_data.provisioningCIDR }}" }}
      method=manual

      [ipv6]
      addr-gen-mode=eui64
      method=ignore
{% endif %}
  - path: /etc/yum.repos.d/kubernetes.repo
    owner: root:root
    permissions: '0644'
    content: |
      [kubernetes]
      name=Kubernetes
      baseurl=https://pkgs.k8s.io/core:/stable:/v1.34/rpm/
      enabled=1
      gpgcheck=1
      gpgkey=https://pkgs.k8s.io/core:/stable:/v1.34/rpm/repodata/repomd.xml.key
  - path : /etc/containers/registries.conf
    content: |
      [registries.search]
      registries = ['docker.io']

      [registries.insecure]
      registries = ['{{ REGISTRY }}']
{% if EXTERNAL_VLAN_ID != "" %}
  - path: /etc/NetworkManager/system-connections/eth0.{{ EXTERNAL_VLAN_ID }}.nmconnection
    owner: root:root
    permissions: '0600'
    content: |
      [connection]
      id=Vlan eth0.{{ EXTERNAL_VLAN_ID }}
      type=vlan
      autoconnect-priority=999
      interface-name=eth0.{{ EXTERNAL_VLAN_ID }}

      [vlan]
      flags=1
      id=3
      parent=eth0

      [ipv4]
      method=auto

      [ipv6]
      addr-gen-mode=eui64
      method=ignore
{% endif %}
