# CentOS specific controlplane kubeadm config
preKubeadmCommands:
  - systemctl restart NetworkManager.service
  - nmcli connection delete "System eth0"
  - nmcli connection load /etc/NetworkManager/system-connections/eth0.nmconnection
  - nmcli connection up eth0
  - nmcli connection load /etc/NetworkManager/system-connections/{{ IRONIC_ENDPOINT_BRIDGE }}.nmconnection
  - nmcli connection up {{ IRONIC_ENDPOINT_BRIDGE }}
{% if VM_EXTRADISKS == "true" %}
  - (echo n; echo p; echo 1; echo  ;echo  ;echo w) | fdisk /dev/vda
  - mkfs.{{ VM_EXTRADISKS_FILE_SYSTEM }} /dev/vda1
  - mkdir {{ VM_EXTRADISKS_MOUNT_DIR }}
  - mount /dev/vda1 {{ VM_EXTRADISKS_MOUNT_DIR }}
{% endif %}
  - systemctl enable --now crio keepalived kubelet
  - systemctl link /lib/systemd/system/monitor.keepalived.service
  - systemctl enable monitor.keepalived.service
  - systemctl start monitor.keepalived.service
postKubeadmCommands:
  - mkdir -p /home/{{ IMAGE_USERNAME }}/.kube
  - chown {{ IMAGE_USERNAME }}:{{ IMAGE_USERNAME }} /home/{{ IMAGE_USERNAME }}/.kube
  - cp /etc/kubernetes/admin.conf /home/{{ IMAGE_USERNAME }}/.kube/config
  - chown {{ IMAGE_USERNAME }}:{{ IMAGE_USERNAME }} /home/{{ IMAGE_USERNAME }}/.kube/config
files:
  - path: /usr/local/bin/retrieve.configuration.files.sh
    owner: root:root
    permissions: '0755'
    content: |
        #!/bin/bash
        set -e
        url="$1"
        dst="$2"
        filename="$(basename $url)"
        tmpfile="/tmp/$filename"
        curl -sSL -w "%{http_code}" "$url" | sed "s:/usr/bin:/usr/local/bin:g" > /tmp/"$filename"
        http_status=$(cat "$tmpfile" | tail -n 1)
        if [ "$http_status" != "200" ]; then
          echo "Error: unable to retrieve $filename file";
          exit 1;
        else
          cat "$tmpfile"| sed '$d' > "$dst";
        fi
  - path: /usr/local/bin/monitor.keepalived.sh
    owner: root:root
    permissions: '0755'
    content: |
        #!/bin/bash
        while :; do
          curl -sk https://127.0.0.1:{{ CLUSTER_APIENDPOINT_PORT }}/healthz 1>&2 > /dev/null
          isOk=$?
          isActive=$(systemctl show -p ActiveState keepalived.service | cut -d'=' -f2)
          if [ $isOk == "0" ] &&  [ $isActive != "active" ]; then
            logger 'API server is healthy, however keepalived is not running, starting keepalived'
            echo 'API server is healthy, however keepalived is not running, starting keepalived'
            sudo systemctl start keepalived.service
          elif [ $isOk != "0" ] &&  [ $isActive == "active" ]; then
            logger 'API server is not healthy, however keepalived running, stopping keepalived'
            echo 'API server is not healthy, however keepalived running, stopping keepalived'
            sudo systemctl stop keepalived.service
          fi
          sleep 5
        done
  - path: /lib/systemd/system/monitor.keepalived.service
    owner: root:root
    content: |
      [Unit]
      Description=Monitors keepalived adjusts status with that of API server
      After=syslog.target network-online.target
      [Service]
      Type=simple
      Restart=always
      ExecStart=/usr/local/bin/monitor.keepalived.sh
      [Install]
      WantedBy=multi-user.target
  - path: /etc/keepalived/keepalived.conf
    content: |
      ! Configuration File for keepalived
      global_defs {
          notification_email {
          sysadmin@example.com
          support@example.com
          }
          notification_email_from lb@example.com
          smtp_server localhost
          smtp_connect_timeout 30
      }
      vrrp_instance VI_1 {
          state MASTER
          interface {% if EXTERNAL_VLAN_ID == "" %}eth1{% else %}eth0.{{ EXTERNAL_VLAN_ID }}{% endif %}

          virtual_router_id 1
          priority 101
          advert_int 1
          virtual_ipaddress {
              {{ CLUSTER_APIENDPOINT_HOST }}
          }
      }
  - path: /etc/NetworkManager/system-connections/eth0.nmconnection
    owner: root:root
    permissions: '0600'
    content: |
      [connection]
      id=eth0
      type=ethernet
      interface-name=eth0
      master={{ IRONIC_ENDPOINT_BRIDGE }}
      slave-type=bridge
  - path: /etc/NetworkManager/system-connections/{{ IRONIC_ENDPOINT_BRIDGE }}.nmconnection
    owner: root:root
    permissions: '0600'
    content: |
      [connection]
      id={{ IRONIC_ENDPOINT_BRIDGE }}
      type=bridge
      interface-name={{ IRONIC_ENDPOINT_BRIDGE }}

      [bridge]
      stp=false

      [ipv4]
      address1={{ "{{ ds.meta_data.provisioningIP }}" }}/{{ "{{ ds.meta_data.provisioningCIDR }}" }}
      method=manual

      [ipv6]
      addr-gen-mode=eui64
      method=ignore
  - path: /etc/yum.repos.d/kubernetes.repo
    owner: root:root
    permissions: '0644'
    content: |
      [kubernetes]
      name=Kubernetes
      baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
      enabled=1
      gpgcheck=1
      repo_gpgcheck=0
      gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
  - path : /etc/containers/registries.conf
    content: |
      [registries.search]
      registries = ['docker.io']

      [registries.insecure]
      registries = ['{{ REGISTRY }}']
