# Ansible playbook related variables
HOME: "{{ lookup('env', 'HOME') }}"
NAMESPACE: "{{ lookup('env', 'NAMESPACE') | default('metal3', true) }}"
IRONIC_NAMESPACE: "{{ lookup('env', 'IRONIC_NAMESPACE') | default('baremetal-operator-system', true) }}"
NAMEPREFIX: "{{ lookup('env', 'NAMEPREFIX') | default('baremetal-operator', true) }}"
CRS_PATH: "{{ metal3_dir }}/tests/roles/run_tests/templates"
TEMP_GEN_DIR: "{{ metal3_dir }}/tests/roles/run_tests/files/manifests"
EPHEMERAL_CLUSTER: "{{ lookup('env', 'EPHEMERAL_CLUSTER') | default('kind', true) }}"
CAPI_CONFIG_FOLDER: "{{ lookup('env', 'CAPI_CONFIG_FOLDER') | default('$HOME/.config/cluster-api', true) }}"
CLUSTER_APIENDPOINT_HOST: "{{ lookup('env', 'CLUSTER_APIENDPOINT_HOST') }}"
CLUSTER_APIENDPOINT_PORT: "{{ lookup('env', 'CLUSTER_APIENDPOINT_PORT') | default(6443, true) }}"
CLUSTER_APIENDPOINT_IP: "{{ lookup('env', 'CLUSTER_APIENDPOINT_IP') }}"
CLUSTER_NAME: "{{ lookup('env', 'CLUSTER_NAME') | default('test1', true) }}"
CONTROL_PLANE_MACHINE_COUNT: "{{ lookup('env', 'CONTROL_PLANE_MACHINE_COUNT') | default(1, true) }}"
WORKER_MACHINE_COUNT: "{{ lookup('env', 'WORKER_MACHINE_COUNT') | default(1, true) }}"
NUM_NODES: "{{ lookup('env', 'NUM_NODES') | default(2, true) }}"
NODE_DRAIN_TIMEOUT: "{{ lookup('env', 'NODE_DRAIN_TIMEOUT') | default('0s', true) }}"
BMOPATH: "{{ lookup('env', 'BMOPATH') }}"
IRONIC_DATA_DIR: "{{ lookup('env', 'IRONIC_DATA_DIR') }}"
KUBECONFIG_PATH: "/home/ubuntu/.kube/config"
KUBERNETES_VERSION: "{{ lookup('env', 'KUBERNETES_VERSION') | default('v1.31.2', true) }}"
UPGRADED_K8S_VERSION: "{{ lookup('env', 'UPGRADED_K8S_VERSION') | default('v1.31.2', true) }}"
MAX_SURGE_VALUE: "{{ lookup('env', 'MAX_SURGE_VALUE') | default('1', true) }}"
VM_EXTRADISKS: "{{ lookup('env', 'VM_EXTRADISKS') | default('false', true) }}"
VM_EXTRADISKS_FILE_SYSTEM: "{{ lookup('env', 'VM_EXTRADISKS_FILE_SYSTEM') | default('ext4', true) }}"
VM_EXTRADISKS_MOUNT_DIR: "{{ lookup('env', 'VM_EXTRADISKS_MOUNT_DIR') | default('/mnt/disk2') }}"
KUBERNETES_BINARIES_VERSION: "{{ lookup('env', 'KUBERNETES_BINARIES_VERSION') | default(lookup('env', 'KUBERNETES_VERSION') | default('v1.31.2', true), true) }}"
KUBERNETES_BINARIES_CONFIG_VERSION: "{{ lookup('env', 'KUBERNETES_BINARIES_CONFIG_VERSION') | default('v0.15.1', true) }}"
IP_STACK: "{{ lookup('env', 'IP_STACK') | default('v4', true) }}"
IPAM_PROVISIONING_POOL_RANGE_START: "{{ lookup('env', 'IPAM_PROVISIONING_POOL_RANGE_START') | default('172.22.0.100', true) }}"
IPAM_PROVISIONING_POOL_RANGE_END: "{{ lookup('env', 'IPAM_PROVISIONING_POOL_RANGE_END') | default('172.22.0.200', true) }}"
BARE_METAL_PROVISIONER_CIDR: "{{ lookup('env', 'BARE_METAL_PROVISIONER_CIDR') | default('24', true) }}"
IPAM_EXTERNALV4_POOL_RANGE_START: "{{ lookup('env', 'IPAM_EXTERNALV4_POOL_RANGE_START') | default('192.168.111.100', true) }}"
IPAM_EXTERNALV4_POOL_RANGE_END: "{{ lookup('env', 'IPAM_EXTERNALV4_POOL_RANGE_END') | default('192.168.111.200', true) }}"
EXTERNAL_SUBNET_V4_PREFIX: "{{ lookup('env', 'EXTERNAL_SUBNET_V4_PREFIX') | default('24', true) }}"
EXTERNAL_SUBNET_V4_HOST: "{{ lookup('env', 'EXTERNAL_SUBNET_V4_HOST') | default('192.168.111.1', true) }}"
EXTERNAL_VLAN_ID: "{{ lookup('env', 'EXTERNAL_VLAN_ID') }}"
IPAM_EXTERNALV6_POOL_RANGE_START: "{{ lookup('env', 'IPAM_EXTERNALV6_POOL_RANGE_START') | default('fd55::100', true) }}"
IPAM_EXTERNALV6_POOL_RANGE_END: "{{ lookup('env', 'IPAM_EXTERNALV6_POOL_RANGE_END') | default('fd55::200', true) }}"
EXTERNAL_SUBNET_V6_PREFIX: "{{ lookup('env', 'EXTERNAL_SUBNET_V6_PREFIX') | default('64', true) }}"
EXTERNAL_SUBNET_V6_HOST: "{{ lookup('env', 'EXTERNAL_SUBNET_V6_HOST') | default('fd55::1', true) }}"
BARE_METAL_PROVISIONER_IP: "{{ lookup('env', 'BARE_METAL_PROVISIONER_IP') | default('172.22.0.1', true) }}"
IRONIC_HOST: "{{ lookup('env', 'IRONIC_HOST') | default('172.22.0.2', true) }}"
IRONIC_HOST_IP: "{{ lookup('env', 'IRONIC_HOST_IP') | default('172.22.0.2', true) }}"
KUBECTL_ARGS: "--kubeconfig=/tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml"
DEPLOY_KERNEL_URL: "{{ lookup('env', 'DEPLOY_KERNEL_URL') }}"
DEPLOY_RAMDISK_URL: "{{ lookup('env', 'DEPLOY_RAMDISK_URL') }}"
IRONIC_URL: "{{ lookup('env', 'IRONIC_URL') }}"
IRONIC_INSPECTOR_URL: "{{ lookup('env', 'IRONIC_INSPECTOR_URL') }}"
POD_CIDR: "{{ lookup('env', 'POD_CIDR') }}"
SERVICE_CIDR: "10.96.0.0/12"
CAPM3RELEASE: "{{ lookup('env', 'CAPM3RELEASE') | default('v1.1.2', true) }}"
CAPIRELEASE: "{{ lookup('env', 'CAPIRELEASE') | default('v1.1.4', true) }}"
SSH_PRIVATE_KEY: "{{ lookup('env', 'SSH_KEY') }}"
SSH_PUB_KEY_CONTENT: "{{ lookup('file', '{{ HOME }}/.ssh/id_rsa.pub') }}"
IMAGE_USERNAME: "{{ lookup('env', 'IMAGE_USERNAME') | default('metal3', true) }}"
REGISTRY: "{{ lookup('env', 'REGISTRY') | default('192.168.111.1:5000', true) }}"
CALICO_MINOR_RELEASE: "{{ lookup('env', 'CALICO_MINOR_RELEASE') | default('v3.25.1', true) }}"
CALICO_PATCH_RELEASE: "{{ lookup('env', 'CALICO_PATCH_RELEASE') | default('v3.25.1', true) }}"
CONTAINER_HUB_PROXY: "{{ lookup('env', 'CONTAINER_HUB_PROXY') }}"
WORKING_DIR: "{{ lookup('env', 'WORKING_DIR') | default('/opt/metal3-dev-env', true) }}"

# Environment variables for deployment. IMAGE_OS can be centos or ubuntu, change accordingly to your needs.
IMAGE_OS: "{{ lookup('env', 'IMAGE_OS') | default('centos', true) }}"
CONTAINER_RUNTIME: "{{ lookup('env', 'CONTAINER_RUNTIME') | default('podman', true) }}"
TARGET_NODE_MEMORY: "{{ lookup('env', 'TARGET_NODE_MEMORY') | default('4096', true) }}"
CAPI_VERSION: "{{ lookup('env', 'CAPI_VERSION') | default('v1beta1', true) }}"
CAPM3_VERSION: "{{ lookup('env', 'CAPM3_VERSION') | default('v1beta1', true) }}"
IRONIC_IMAGE_DIR: "{{ lookup('env', 'IRONIC_IMAGE_DIR') | default('/opt/metal3-dev-env/ironic/html/images') }}"
IRONIC_ENDPOINT_BRIDGE: "{{ lookup('env', 'BARE_METAL_PROVISIONER_INTERFACE') | default('provisioning', true) }}"
UPGRADED_IMAGE_NAME: "{{ lookup('env', 'UPGRADED_IMAGE_NAME') }}"
UPGRADED_RAW_IMAGE_NAME: "{{ lookup('env', 'UPGRADED_RAW_IMAGE_NAME') }}"

# Distibution specific environment variables
IMAGE_NAME: "{{ lookup('env', 'IMAGE_NAME') | default('UBUNTU_22.04_NODE_IMAGE_K8S_{{KUBERNETES_VERSION}}.qcow2', true) }}"
RAW_IMAGE_NAME: "{{ lookup('env', 'IMAGE_RAW_NAME') | default('UBUNTU_22.04_NODE_IMAGE_K8S_{{KUBERNETES_VERSION}}-raw.img', true) }}"
IMAGE_LOCATION: "{{ lookup('env', 'IMAGE_LOCATION') | default('https://artifactory.nordix.org/artifactory/metal3/images/k8s_{{KUBERNETES_VERSION}}', true) }}"
IMAGE_URL: "http://{{ BARE_METAL_PROVISIONER_IP }}/images/{{ RAW_IMAGE_NAME }}"
IMAGE_FORMAT: "{{ lookup('env', 'IMAGE_FORMAT') | default('raw', true) }}"
IMAGE_CHECKSUM_TYPE: "{{ lookup('env', 'IMAGE_CHECKSUM_TYPE') | default('sha256', true) }}"
IMAGE_CHECKSUM: "http://{{ BARE_METAL_PROVISIONER_IP }}/images/{{ RAW_IMAGE_NAME }}.{{ IMAGE_CHECKSUM_TYPE }}sum"

# Environment variables to install Ironic with TLS, Basic Auth and MariaDB
GOPATH: "{{ lookup('env', 'GOPATH')}}"
IRONIC_TLS_SETUP: "{{ lookup('env', 'IRONIC_TLS_SETUP') | default('true', true) }}"
IRONIC_BASIC_AUTH: "{{ lookup('env', 'IRONIC_BASIC_AUTH') | default('true', true) }}"
IRONIC_USE_MARIADB: "{{ lookup('env', 'IRONIC_USE_MARIADB') | default('false', true) }}"

# Metrics
CAPM3_DIAGNOSTICS_ADDRESS: "localhost:8080"
CAPM3_INSECURE_DIAGNOSTICS: "true"
IPAM_DIAGNOSTICS_ADDRESS: "localhost:8080"
IPAM_INSECURE_DIAGNOSTICS: "true"

# Args to pass to the deploy.sh script when deploying Ironic and BMO
# [k]eepalived [t]ls [n]o basic auth or [m]ariadb
BMO_IRONIC_ARGS: "-k {{ (IRONIC_TLS_SETUP == 'true') | ternary('-t', '') }} {{ (IRONIC_BASIC_AUTH == 'true') | ternary('', '-n') }} {{ (IRONIC_USE_MARIADB == 'true') | ternary('-m', '') }}"

provision_cluster_actions:
- "ci_test_provision"
- "provision_cluster"
provision_controlplane_actions:
- "ci_test_provision"
- "provision_controlplane"
provision_workers_actions:
- "ci_test_provision"
- "provision_worker"
provision_actions:
- "ci_test_provision"
- "provision_cluster"
- "provision_controlplane"
- "provision_worker"
- "generate_template"
deprovision_cluster_actions:
- "ci_test_deprovision"
- "deprovision_cluster"
deprovision_controlplane_actions:
- "deprovision_controlplane"
deprovision_workers_actions:
- "deprovision_worker"
verify_actions:
- "ci_test_provision"
- "pivoting"
pivot_actions:
- "pivoting"
repivot_actions:
- "repivoting"
cleanup_actions:
- "ci_test_deprovision"
image_download_actions:
- "ci_test_provision"
- "provision_controlplane"
- "provision_worker"
